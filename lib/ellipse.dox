/*
 * Copyright (C) 2021 Kevin Matthes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * \file    ellipse.dox
 * \brief   The docstrings for Doxygen.
 *
 *
 *
 * In order to avoid both redundant explanations of related symbols and to
 * unnecessarily enlarge the source files, the corresponding documentation
 * information for all symbols is provided centrally by this file.
 *
 *
 *
 * \author      Kevin Matthes
 * \copyright   (C) 2021 Kevin Matthes.
 *              This file is licensed GPL 2 as of June 1991.
 * \date        2021
 * \note        See `LICENSE' for full license.
 *              See `README.md' for project details.
 */

/******************************************************************************/

/*! \def    __ELLIPSE_HPP__
 *
 * In order to prevent unintended side effects when including this header
 * mulitple times, this define is utilised such that its header is included at
 * most once.
 *
 *
 *
 * \brief   Ensuring this header being included just once.
 */



/*! \fn     Ellipse :: Ellipse  ( const float r
 *                              , const float e
 *                              , const float cx
 *                              , const float cy
 *                              , const float cz
 *                              , const float tx
 *                              , const float ty
 *                              , const float tz
 *                              , const float nx
 *                              , const float ny
 *                              , const float nz
 *                              )
 *
 * This class constructs a simple ellipse from the given data.  Thereby, the
 * considered ellipse is oriented in space by a normal and a tangent.
 *
 * The normal is the normal of the plane the ellipse is situated in.  Hence, it
 * determines which side of the ellipse is a front face.  This information is
 * important for optimisation techniques such as Backface Culling.
 *
 * The tangent of the ellipse is a vector which spans the plane the ellipse lays
 * in.  Furthermore, the tangent acts as the ellipse's Up Vector.  This aspect
 * is required in order to transform the ellipse properly.
 *
 *
 *
 * \brief   Construct a new ellipse from the given data.
 * \param   r   This ellipse's radius.
 * \param   e   This ellipse's excentricity.
 * \param   cx  This ellipse's centre's x coordinate.
 * \param   cy  This ellipse's centre's y coordinate.
 * \param   cz  This ellipse's centre's z coordinate.
 * \param   tx  This ellipse's tangent's x component.
 * \param   ty  This ellipse's tangent's y component.
 * \param   tz  This ellipse's tangent's z component.
 * \param   nx  This ellipse's normal's x component.
 * \param   ny  This ellipse's normal's y component.
 * \param   nz  This ellipse's normal's z component.
 */

/*! \fn     vector <float> Ellipse :: eval  ( const float t
 *                                          , const float offset
 *                                          )
 *
 * The considered ellipse can act as the movement curve for mathematical objects
 * such as spheres.  Therefore, the object to move is assumed to be situated on
 * the current ellipse which, hence, needs to be evaluated in order to receive a
 * position vector.
 *
 * Since the ellipse is assumed to be parametrised by time, this method needs to
 * be called with the point of time for which the ellipse shall be evaluated.
 * Using an `offset`, this evaluation can be delayed as required.
 *
 *
 *
 * \brief   Evaluate this ellipse for a given point of time.
 * \param   t       The point of time to evaluate this ellipse for.
 * \param   offset  The temporal offset for the evaluation.
 * \return  The curve point for the considered point of time.
 */

/*! \overload   vector <float> Ellipse :: eval (const float t)
 */

/******************************************************************************/
